#global moduleJdk, target, modid
#target = '%ARG1%'
#moduleJdk = '%ARG2%'[-1:]
#modid = moduleName + '.' + target

	<path id="$[modid].classpath">
#tokens = '%ARG3%'.split(',')
#for token in tokens:
#	token = token.strip()
#	if (len(token) == 0):
#		continue
#	if token.startswith('>'):
#		val = token[1:]
		<path path="${$[val].out.dir}"/>
#	elif token.startswith('#'):
#		val = moduleName + '.' + token[1:]
		<path path="${$[val].out.dir}"/>
#	else:
#		val = token
		<path refid="lib.$[val]"/>
#
	</path>

	<!-- compile: $[modid] -->
	
	<path id="$[modid].bootclasspath">
		<path refid="jdk$[moduleJdk].classpath"/>
		<path refid="jdk$[moduleJdk].tools"/>
	</path>

	<property name="$[modid].out.dir" value="${output.dir}/$[target]/$[moduleName]"/>
	<property name="$[modid].src.dir" value="mod/$[moduleName]/$[source(target)]"/>
	
	<target name="compile.$[modid]" description="compiles module: $[moduleName]; $[target] classes">
		<mkdir dir="${$[modid].out.dir}"/>
		<javac destdir="${$[modid].out.dir}"
				listfiles="on" debug="on"
				source="1.$[moduleJdk]" target="1.$[moduleJdk]"
				deprecation="true" encoding="UTF-8"
				fork="true" executable="${jdk$[moduleJdk].bin}/javac">
			<src location="${$[modid].src.dir}"/>
			<bootclasspath refid="$[modid].bootclasspath"/>
			<classpath refid="$[modid].classpath"/>
		</javac>
		<copy todir="${$[modid].out.dir}">
			<fileset dir="${$[modid].src.dir}">
				<patternset refid="resources"/>
				<type type="file"/>
			</fileset>
		</copy>
	</target>
